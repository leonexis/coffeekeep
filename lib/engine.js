// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, MudService, MudSession, splitFull,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  splitFull = require('./util').splitFull;

  exports.MudSession = MudSession = (function(_super) {
    __extends(MudSession, _super);

    function MudSession(service, socket) {
      this.service = service;
      this.socket = socket;
      this.processData = __bind(this.processData, this);
      this.world = this.service.world;
      this.user = this.world.users.first();
      this.user.addSession(this);
      this.state = 'new';
      this.echo = true;
      this.commandMode = true;
      this.buffer = "";
      this.history = [];
      this.inCommand = false;
      this.socket.on('data', this.processData);
      this.processCommand('l');
      this.writePrompt();
    }

    MudSession.prototype.processData = function(data) {
      var c, code, error, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        c = data[_i];
        code = c.charCodeAt();
        if ((127 > code && code > 31)) {
          this.buffer += c;
          if (this.echo) {
            this.write(c);
          }
          continue;
        }
        if (this.commandMode && code === 13) {
          if (this.echo) {
            this.write('\r\n');
          }
          try {
            this.processCommand(this.buffer);
          } catch (_error) {
            error = _error;
            this.write("Error while processing command '" + this.buffer + "': " + (error.toString()));
            console.error("Error while processing command: " + error.stack);
          }
          this.writePrompt();
          this.buffer = "";
          continue;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MudSession.prototype.writePrompt = function() {
      return this.write("\n#" + (this.user.getLocation().get('id')) + "> ");
    };

    MudSession.prototype.processCommand = function(command) {
      return this.user.doCommand(command);
    };

    MudSession.prototype.processCommandOld = function(command) {
      var direction, link, links, location, newRoom, _ref, _ref1, _ref2, _results;
      command = command.split();
      location = this.user.getLocation();
      switch (command[0]) {
        case 'l':
        case 'look':
          this.print("" + (location.get('title')));
          this.print("" + (location.get('description')));
          this.write(" exits: ");
          _ref = location.get('links');
          for (direction in _ref) {
            link = _ref[direction];
            this.write("" + direction + " ");
          }
          return this.print('');
        case 'exits':
          this.print("Exits:");
          _ref1 = location.get('links');
          _results = [];
          for (direction in _ref1) {
            link = _ref1[direction];
            _results.push(this.write(" " + direction + " - " + ((_ref2 = link.description) != null ? _ref2 : 'Nothing special\r\n')));
          }
          return _results;
          break;
        case 'n':
        case 'e':
        case 's':
        case 'w':
        case 'u':
        case 'd':
        case 'north':
        case 'easth':
        case 'south':
        case 'west':
        case 'up':
        case 'down':
          direction = (function() {
            switch (command[0]) {
              case 'n':
                return 'north';
              case 'e':
                return 'east';
              case 's':
                return 'south';
              case 'w':
                return 'west';
              case 'u':
                return 'up';
              case 'd':
                return 'down';
              default:
                return command[0];
            }
          })();
          links = location.get('links');
          if (links[direction] == null) {
            return this.print("You can't go that way.");
          } else {
            link = links[direction];
            newRoom = location.area.rooms.get(link.room);
            if (!newRoom) {
              return this.print("Room not available!");
            } else {
              this.user.setLocation(newRoom);
              location = newRoom;
              return this.processCommand('l');
            }
          }
          break;
        case 'goto':
          if (command.length !== 2) {
            this.print("Must specify room number.");
          }
          newRoom = location.area.rooms.get(command[1]);
          if (newRoom == null) {
            return this.print("Room not loaded.");
          } else {
            this.user.setLocation(newRoom);
            location = newRoom;
            return this.proceesCommand('l');
          }
      }
    };

    MudSession.prototype.write = function(data) {
      return this.socket.write(data);
    };

    MudSession.prototype.print = function(data) {
      return this.socket.write(data + '\r\n');
    };

    return MudSession;

  })(EventEmitter);

  exports.MudService = MudService = (function(_super) {
    __extends(MudService, _super);

    function MudService(world) {
      this.world = world;
      this.sessions = [];
    }

    MudService.prototype.createSession = function(socket) {
      var session;
      session = new MudSession(this, socket);
      return this.sessions.push(session);
    };

    return MudService;

  })(EventEmitter);

}).call(this);
