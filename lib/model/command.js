// Generated by CoffeeScript 1.6.3
(function() {
  var Collection, Command, CommandCollection, Model, fs, path, splitFull, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  splitFull = require('../util').splitFull;

  _ref = require('./'), Model = _ref.Model, Collection = _ref.Collection;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref1 = Command.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Command.prototype.idAttribute = 'name';

    Command.prototype.defaults = {
      name: 'lazy',
      aliases: ['nop'],
      prefixChar: null,
      description: "I don't really do anything",
      help: "Usage: lazy. Dats it",
      action: function(context, request) {
        var mob;
        mob = context.mob;
        return mob.print("The lazy command does nothing.");
      }
    };

    Command.prototype.doCommand = function(context, commandStr, cb) {
      var args, request, verb, _ref2;
      _ref2 = splitFull(commandStr), verb = _ref2[0], args = 2 <= _ref2.length ? __slice.call(_ref2, 1) : [];
      verb = verb.toLowerCase();
      request = {
        verb: verb,
        args: args,
        line: commandStr
      };
      return this.get('action')(context, request);
    };

    return Command;

  })(Model);

  exports.CommandCollection = CommandCollection = (function(_super) {
    __extends(CommandCollection, _super);

    function CommandCollection() {
      _ref2 = CommandCollection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    CommandCollection.prototype.loadDirectory = function(dirName) {
      var fail, file, fileName, files, success, _i, _len;
      console.log("Loading commands from " + dirName);
      success = 0;
      fail = 0;
      files = fs.readdirSync(dirName);
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.slice(-3) !== '.js' && file.slice(-7) !== '.coffee') {
          console.log("Skipping non-command file " + file);
          continue;
        }
        fileName = path.join(dirName, file);
        if (this.loadFile(fileName)) {
          success += 1;
        } else {
          fail += 1;
        }
      }
      console.log("Successfully loaded " + success + " out of " + (success + fail) + " commands");
      if (fail > 0) {
        return console.error("WARNING: Not all commands loaded successfully. Check configuration.");
      }
    };

    CommandCollection.prototype.loadFile = function(fileName, reload) {
      var base, command, commands, error, oldCommand, _i, _len, _ref3;
      if (reload == null) {
        reload = false;
      }
      try {
        base = fileName.slice(0, fileName.lastIndexOf('.'));
        if (reload && (require.cache[base] != null)) {
          delete require.cache[base];
        }
        _ref3 = require(base), commands = _ref3.commands, command = _ref3.command;
        if (commands == null) {
          if (command != null) {
            commands = [command];
          } else {
            console.error("WARNING: Could not load " + base);
            return false;
          }
        }
        for (_i = 0, _len = commands.length; _i < _len; _i++) {
          command = commands[_i];
          if (!(command instanceof Command)) {
            command = new Command(command);
          }
          oldCommand = this.get(command.get('name'));
          if (oldCommand != null) {
            if (reload) {
              console.log("Reloaded command '" + (command.get('name')) + "'");
            } else {
              console.error("WARNING: Command '" + (command.get('name')) + "' already exists from " + (oldCommand.get('fileName')) + ". Replacing.");
            }
            oldCommand.set(command.attributes);
            return true;
          }
          command.set({
            'fileName': fileName
          });
          this.add(command);
          console.log("Loaded command '" + (command.get('name')) + "'");
        }
        return true;
      } catch (_error) {
        error = _error;
        console.error("Error while loading commands from " + base + ": " + (error.toString()));
        console.error(error.stack);
        return false;
      }
    };

    CommandCollection.prototype.doCommand = function(context, commandStr) {
      var args, commandModel, models, verb, _ref3;
      _ref3 = splitFull(commandStr), verb = _ref3[0], args = 2 <= _ref3.length ? __slice.call(_ref3, 1) : [];
      commandModel = this.get(verb);
      if (commandModel == null) {
        models = this.filter(function(c) {
          var aliases;
          aliases = c.get('aliases');
          if (aliases == null) {
            return false;
          }
          return __indexOf.call(aliases, verb) >= 0;
        });
        if (models.length > 1) {
          console.error("WARNING: Multiple commands found for alias '" + verb + "'");
        }
        commandModel = models[0];
      }
      if (commandModel == null) {
        context.mob.print("I don't know how to " + verb + ".");
        return;
      }
      return commandModel.doCommand(context, commandStr);
    };

    return CommandCollection;

  })(Collection);

}).call(this);
