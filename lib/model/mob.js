// Generated by CoffeeScript 1.6.3
(function() {
  var Collection, Mob, MobCollection, Model, _, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require('underscore');

  _ref = require('./'), Model = _ref.Model, Collection = _ref.Collection;

  exports.Mob = Mob = (function(_super) {
    __extends(Mob, _super);

    function Mob() {
      _ref1 = Mob.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Mob.gender = {
      genderless: 0,
      male: 1,
      female: 2,
      transman: 3,
      transwoman: 4,
      androgynous: 5
    };

    Mob.sex = {
      none: 0,
      male: 1,
      female: 2,
      intersex: 3
    };

    Mob.prototype.defaults = {
      name: 'unnamed',
      shortDescription: 'an unnamed mob',
      longDescription: 'A generic formless mob. So much, in fact, that\
 looking at {him} hurts the eyes.',
      extraDescription: 'This would be a long extra description... if it were\
 written, of course.',
      gender: Mob.gender.genderless,
      sex: Mob.sex.none,
      height: 150,
      weight: 80,
      currentLocation: null
    };

    Mob.prototype.initialize = function() {
      return this.sessions = [];
    };

    Mob.prototype.addSession = function(session) {
      return this.sessions.push(session);
    };

    Mob.prototype.removeSession = function(session) {
      return this.sessions = _.without(this.sessions, session);
    };

    Mob.prototype.write = function(data) {
      var session, _i, _len, _ref2, _results;
      _ref2 = this.sessions;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        session = _ref2[_i];
        _results.push(session.write(data));
      }
      return _results;
    };

    Mob.prototype.print = function() {
      var obj, objs, _i, _len;
      objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = objs.length; _i < _len; _i++) {
        obj = objs[_i];
        this.write(obj.toString() + ' ');
      }
      return this.write('\r\n');
    };

    Mob.prototype.getLocation = function() {
      var area, areaId, loc, room, roomId, _ref2;
      loc = this.get('currentLocation');
      if (loc == null) {
        loc = this.world.getStartRoom().getLocationId();
        this.set('currentLocation', loc);
      }
      _ref2 = loc.split('#'), areaId = _ref2[0], roomId = _ref2[1];
      area = this.world.areas.get(areaId);
      if (area == null) {
        console.error("ERROR: the area where " + this.id + ":" + (this.get('title')) + " was located no longer exists! Putting him in the first room of the first area.");
        room = this.world.getStartRoom();
        this.set('currentLocation', room.getLocationId());
      } else {
        room = area.rooms.get(roomId);
      }
      return room;
    };

    Mob.prototype.setLocation = function(room) {
      return this.set('currentLocation', room.getLocationId());
    };

    Mob.prototype.doCommand = function(commandStr) {
      var context, room;
      room = this.getLocation();
      context = {
        mob: this,
        room: room,
        world: this.world,
        area: room.area
      };
      return this.world.commands.doCommand(context, commandStr);
    };

    return Mob;

  })(Model);

  exports.MobCollection = MobCollection = (function(_super) {
    __extends(MobCollection, _super);

    function MobCollection() {
      _ref2 = MobCollection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    MobCollection.prototype.model = Mob;

    return MobCollection;

  })(Collection);

}).call(this);
